/*
*********************************************************************************************************
*                                                 uC/OS-II
*                                          The Real-Time Kernel
*                                               PORT Windows
*
*
*            		          	Arnaud Desaulty, Frederic Fortier, Eva Terriault
*                                  Ecole Polytechnique de Montreal, Qc, CANADA
*                                                  08/2017
*
* File : simulateur.c
*
*********************************************************************************************************
*/

// Main include of ï¿½C-II
#include "simAvion.h"

#include "bsp_init.h"
#include "platform.h"
#include <stdlib.h>
#include <stdbool.h>
#include <xil_printf.h>
#include <xgpio.h>
///////////////////////////////////////////////////////////////////////////////////////
//								Routines d'interruptions
///////////////////////////////////////////////////////////////////////////////////////

void timer_isr(void* not_valid) {
	if (private_timer_irq_triggered()) {
		private_timer_clear_irq();
		OSTimeTick();
	}
}

void fit_timer_1s_isr(void *not_valid) {
	/*TODO: definition handler pour timer 1s*/
	xil_printf("1 seconde \n");
	uint8_t err;
	err = OSSemPost(semGeneration);
	errMsg(err, "ERROR: Sem generation");
}

void fit_timer_3s_isr(void *not_valid) {
	/*TODO: definition handler pour timer 3s*/
	xil_printf("3 seconde \n");
	uint8_t err;
	err = OSSemPost(semVerification);
	errMsg(err, "ERROR: Sem verification");

}

void gpio_isr(void * not_valid) {
	/*TODO: definition handler pour switches*/
	XIntc_Acknowledge(&axi_intc, GPIO_SW_IRQ_ID);
	XGpio_InterruptClear(&gpSwitch, XGPIO_IR_MASK);
	xil_printf("gpio  \n");

	uint8_t err;
	err = OSSemPost(semStats);
	errMsg(err, "ERROR: Sem stats");

}

/*
*********************************************************************************************************
*                                                  MAIN
*********************************************************************************************************
*/

int main(void)
{
	initialize_bsp();

	OSInit(); 

	create_application();

	prepare_and_enable_irq();

	xil_printf("*** Starting uC/OS-II scheduler ***\n");

	stopSimDebordement = false;

	OSStart();

	cleanup();

	cleanup_platform();

	return 0;
}

void create_application() {
	int error;

	error = create_tasks();
	if (error != 0)
		xil_printf("Error %d while creating tasks\n", error);

	error = create_events();
	if (error != 0)
		xil_printf("Error %d while creating events\n", error);
}

int create_tasks() {
	// Stacks
	static OS_STK generationStk[TASK_STK_SIZE]; //Stack of each task
	static OS_STK atterrissage0Stk[TASK_STK_SIZE];
	static OS_STK terminal0Stk[TASK_STK_SIZE];
	static OS_STK terminal1Stk[TASK_STK_SIZE];
	static OS_STK decollageStk[TASK_STK_SIZE];
	static OS_STK statistiquesStk[TASK_STK_SIZE];
	static OS_STK verificationStk[TASK_STK_SIZE];

	uint8_t err = OS_ERR_NONE;

	/*TODO: Creation des taches*/
	int numTerminal0 = 0;
	int numTerminal1 = 1;

	err |= OSTaskCreate(&generation, NULL, &generationStk[TASK_STK_SIZE - 1], GENERATION_PRIO);
	err |= OSTaskCreate(&atterrissage, NULL, &atterrissage0Stk[TASK_STK_SIZE - 1], ATTERRISSAGE_PRIO);
	err |= OSTaskCreate(&terminal, &numTerminal0, &terminal0Stk[TASK_STK_SIZE - 1], TERMINAL0_PRIO);
	err |= OSTaskCreate(&terminal, &numTerminal1, &terminal1Stk[TASK_STK_SIZE - 1], TERMINAL1_PRIO);
	err |= OSTaskCreate(&decollage, NULL, &decollageStk[TASK_STK_SIZE - 1], DECOLLAGE_PRIO);
	err |= OSTaskCreate(&statistiques, NULL, &statistiquesStk[TASK_STK_SIZE - 1], STATISTIQUES_PRIO);
	err |= OSTaskCreate(&verification, NULL, &verificationStk[TASK_STK_SIZE - 1], VERIFICATION_PRIO);

	errMsg(err, "Error: creation des tâches");

	return 0;
}

int create_events() {
	uint8_t err;

	/* TODO: Creation des semaphores, flags, files, maiblox, mutex, ... */
	semGeneration = OSSemCreate(0);
	semStats = OSSemCreate(0);
	semVerification = OSSemCreate(0);

	mboxTerm0 = OSMboxCreate(NULL);
	mboxTerm1 = OSMboxCreate(NULL);

	Q_atterrissage_high = OSQCreate(&Q_atterrissage_high_data[0], sizeof(Q_atterrissage_high_data));
	Q_atterrissage_medium = OSQCreate(&Q_atterrissage_medium_data[0], sizeof(Q_atterrissage_medium_data));
	Q_atterrissage_low =  OSQCreate(&Q_atterrissage_low_data[0], sizeof(Q_atterrissage_low_data));

	Q_decollage = OSQCreate(&Q_decollage_data[0], sizeof(Q_decollage_data));

	flagTerminaux = OSFlagCreate(0, &err);
	errMsg(err, "ERROR: Create events");

	return 0;
}

/*
*********************************************************************************************************
*                                            TASK FUNCTIONS
*********************************************************************************************************
*/
void generation(void* data) {
	uint8_t err;
	int nbAvionsCrees = 0;
	xil_printf("[GENERATION] Tache lancee\n");
	int skipGen = 0;
	int seed = 42;
	while (1) {
		/*TODO: Synchronisation unilaterale timer 1s*/
		OSSemPend(semGeneration, 0, &err);
		errMsg(err, "ERROR: sem pend generation");

		srand(seed);
		skipGen = rand() % 5; //On saute la generation 1 fois sur 5
		if (skipGen != 0){
			Avion* avion = malloc(sizeof(Avion));
			avion->id = nbAvionsCrees;
			remplirAvion(avion);
			nbAvionsCrees++;

			/*TODO: Envoi des avions dans les files appropriees*/
			int retard = avion->retard;
			if (retard <= BORNE_SUP_LOW) {
				err |= OSQPost(Q_atterrissage_low, avion);
			} else if (retard <= BORNE_SUP_MEDIUM) {
				err |= OSQPost(Q_atterrissage_medium, avion);
			} else if (retard <= BORNE_SUP_HIGH) {
				err |= OSQPost(Q_atterrissage_high, avion);
			}
		}
		else{
			/*xil_printf("[GENERATION] Pas de generation\n");*/
		}
		seed++;
	}
}

void atterrissage(void* data)
{
	uint8_t err;
	Avion* avion = NULL;
	xil_printf("[ATTERRISSAGE] Tache lancee\n");
	while (1) {
		/*TODO: Mise en attente des 3 files en fonction de leur priorité*/
		avion = NULL;
		do {
			avion = (Avion*)OSQAccept(Q_atterrissage_high, &err);
			if (avion == NULL) {
				avion = (Avion*)OSQAccept(Q_atterrissage_medium, &err);
				if (avion == NULL)
					avion = (Avion*)OSQAccept(Q_atterrissage_low, &err);
			}
			errMsg(err, "ERROR: OS QUEUE ACCEPT ATTERRISSAGE");

		} while (avion == NULL);

		xil_printf("[ATTERRISSAGE] Debut atterrissage\n");
		OSTimeDly(150); //Temps pour que l'avion atterrisse

		xil_printf("[ATTERRISSAGE] Attente terminal libre\n");
		/*TODO: Mise en attente d'un terminal libre (mecanisme a votre choix)*/
		OSFlagPend(flagTerminaux, 0x03, OS_FLAG_WAIT_SET_ANY, 0, &err);
		errMsg(err, "ERROR: flagpend atterissage");
		OS_FLAGS flags = OSFlagPendGetFlagsRdy();

		int8_t termNumber = flags & FLAG_TERMINAL1;



		//xil_printf("[ATTERRISSAGE] Terminal libre num %d obtenu\n", ...);

		/*TODO: Envoi de l'avion au terminal choisi (mecanisme de votre choix)*/
		if (termNumber == 0) {
			err |= OSMboxPost(mboxTerm0, avion);
		} else {
			err |= OSMboxPost(mboxTerm1, avion);
		}

		errMsg(err, "ERROR: Mbox post error");
	}
}

void terminal(void* data)
{
	uint8_t err;
	int numTerminal = *((int*)data); //TODO: A modifier
	Avion* avion = NULL;
	xil_printf("[TERMINAL %d] Tache lancee\n", numTerminal);

	while (1) {

		/*TODO: Mise en attente d'un avion venant de la piste d'atterrissage*/
		if(numTerminal == 0) {
			avion = (Avion*)OSMboxPend(mboxTerm0, 0, &err);
		} else {
			avion = (Avion*)OSMboxPend(mboxTerm1, 0, &err);
		}
		errMsg(err, "ERROR: Os mbox pend terminal");
		xil_printf("[TERMINAL %d] Obtention avion\n", numTerminal);

		OSTimeDly(160);//Attente pour le vidage, le nettoyage et le remplissage de l'avion

		remplirAvion(avion);

		/*TODO: Envoi de l'avion pour le piste de decollage*/
		err = OSQPost(Q_decollage, avion);
		xil_printf("[TERMINAL %d] Liberation avion\n", numTerminal);

		/*TODO: Notifier que le terminal est libre (mecanisme de votre choix)*/
	}
	
}

void decollage(void* data)
{
	uint8_t err;
	Avion* avion = NULL;
	xil_printf("[DECOLLAGE] Tache lancee\n");

	while (1) {
		/*TODO: Mise en attente d'un avion pret pour le decollage*/

		OSTimeDly(30); //Temps pour que l'avion decolle
		xil_printf("[DECOLLAGE] Avion decolle\n");

		/*TODO: Destruction de l'avion*/
	}
}


void statistiques(void* data){
	uint8_t err;
	xil_printf("[STATISTIQUES] Tache lancee\n");
	while(1){
		/*TODO: Synchronisation unilaterale switches*/
		OSSemPend(semStats, 0, &err);
		errMsg(err, "ERROR: sem pend stats");
		xil_printf("\n------------------ Affichage des statistiques ------------------\n");

		/*TODO: Obtenir statistiques pour les files d'atterrissage*/
		/*xil_printf("Nb d'avions en attente d'atterrissage de type High : %d\n", ...);
		xil_printf("Nb d'avions en attente d'atterrissage de type Medium : %d\n", ...);
		xil_printf("Nb d'avions en attente d'atterrissage de type Low : %d\n", ...);*/

		/*TODO: Obtenir statistiques pour la file de decollage*/
		//xil_printf("Nb d'avions en attente de decollage : %d\n", ...);

		/*TODO: Obtenir statut des terminaux*/
		xil_printf("Terminal 0 ");
		int statutTerm0 = 0; /*A modifier (simplement un exemple d'affichage pour vous aider)*/
		(statutTerm0 == 0) ? xil_printf("OCCUPE\n") : xil_printf("LIBRE\n");

		xil_printf("Terminal 1 ");
		int statutTerm1 = 0; /*A modifier (simplement un exemple d'affichage pour vous aider)*/
		(statutTerm1 == 0) ? xil_printf("OCCUPE\n") : xil_printf("LIBRE\n");
	}
}

void verification(void* data){
	uint8_t err;
	xil_printf("[VERIFICATION] Tache lancee\n");
	while(1){
		/*TODO: Synchronisation unilaterale avec timer 3s*/
		OSSemPend(semVerification, 0, &err);
		errMsg(err, "ERROR: sem pend verification");

		if (stopSimDebordement){
			/*TODO: Suspension de toutes les taches de la simulation*/
			err |= OSTaskSuspend(GENERATION_PRIO);
			err |= OSTaskSuspend(ATTERRISSAGE_PRIO);
			err |= OSTaskSuspend(TERMINAL0_PRIO);
			err |= OSTaskSuspend(TERMINAL1_PRIO);
			err |= OSTaskSuspend(DECOLLAGE_PRIO);
			err |= OSTaskSuspend(STATISTIQUES_PRIO);
			err |= OSTaskSuspend(VERIFICATION_PRIO);
			errMsg(err, "ERROR : task suspend");
		}
	}
}
void remplirAvion(Avion* avion) {
	srand(OSTimeGet());
	avion->retard = rand() % BORNE_SUP_HIGH;
	avion->origine = rand() % NB_AEROPORTS;
	do { avion->destination = rand() % NB_AEROPORTS; } while (avion->origine == avion->destination);
	/*xil_printf("Avion retard = %d\n", avion->retard);
	xil_printf("Avion origine = %d\n", avion->origine);
	xil_printf("Avion destination = %d\n", avion->destination);*/
}

void errMsg(uint8_t err, char* errMsg)
{
	if (err != OS_ERR_NONE)
	{
		xil_printf(errMsg);
		exit(1);
	}
}
